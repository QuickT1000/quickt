image: gitlab/dind
services:
  - docker:dind

stages:
  - build
  - release
  - prod
  - cleanup

variables:
  DOCKER_REPOSITORY: $CI_REGISTRY_IMAGE:latest
  DOCKER_CONTAINER_NAME: quickt
  CONTAINER_TEST_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
  CONTAINER_RELEASE_IMAGE: $CI_REGISTRY_IMAGE:latest
  DW_DATABASE_USER: $DW_DATABASE_USER
  DW_DATABASE_PASSWORD: $DW_DATABASE_PASSWORD
  DW_DATABASE_DB: $DW_DATABASE_DB
  DW_DATABASE_PORT: $DW_DATABASE_PORT

before_script:
  - export
  - echo "$DW_DATABASE_USER"
  - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY

build:
  stage: build
  tags:
    - tools
  script:
    - docker build -t $CONTAINER_TEST_IMAGE -f Dockerfile .
    - docker push $CONTAINER_TEST_IMAGE

release-image:
  stage: release
  tags:
    - tools
  script:
    - docker pull $CONTAINER_TEST_IMAGE
    - docker tag $CONTAINER_TEST_IMAGE $CONTAINER_RELEASE_IMAGE
    - docker push $CONTAINER_RELEASE_IMAGE

prod:
  stage: prod
  tags:
    - tools
  script:
    - docker-compose -f docker-compose.prod.yml up --force-recreate -d
  only:
    - main
  environment:
    name: production
    url: https://quickt.de

cleanup:
  stage: cleanup
  tags:
    - tools
  script:
    # Stoppe alle laufenden Container, die das aktuelle Image verwenden
    - docker ps -q --filter ancestor=$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME | xargs -r docker stop
    # Warte einen Moment, um sicherzustellen, dass alle Container gestoppt sind
    - sleep 2
    # Entferne alle gestoppten Container, die das aktuelle Image verwenden
    - docker ps -a -q --filter ancestor=$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME | xargs -r docker rm
    # Lösche das aktuelle Image
    - docker rmi $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME --force || echo "Image kann nicht gelöscht werden, da es von einem laufenden Container verwendet wird"
    # Lösche alle unbenutzten (dangling) Images
    - docker rmi $(docker images -f "dangling=true" -q) --force


